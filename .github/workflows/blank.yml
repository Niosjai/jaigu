name: Cracker-RDP

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest  # Updated to use the latest Windows runner

    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: Expand-Archive ngrok.zip
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Create Tunnel
      run: Start-Process -NoNewWindow -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389"
    - name: Get Ngrok URL
      id: ngrok-url
      run: |
        $retryCount = 0
        $maxRetries = 10
        $url = $null
        do {
          Start-Sleep -Seconds 3
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels" -UseBasicParsing | ConvertFrom-Json
            $url = $response.tunnels[0].public_url
            Write-Host "Ngrok URL: $url"
            echo "NGROK_URL=$url" >> $env:GITHUB_ENV
            break
          } catch {
            Write-Host "Retrying... ($retryCount of $maxRetries)"
            $retryCount++
          }
        } while ($retryCount -lt $maxRetries)
        if (-not $url) {
          Write-Host "Failed to retrieve Ngrok URL"
          exit 1
        }
    - name: Keep alive to maintain tunnel
      run: while ($true) { Start-Sleep -Seconds 3600 }
